---
- hosts: all
  any_errors_fatal: true
  gather_facts: true
  handlers:
    - name: Reload systemd daemon
      become: true
      systemd:
        daemon_reload: true
      listen:
        - systemd_read_configs
  pre_tasks:
    - name: Update all APT packages to the latest version
      apt:
        cache_valid_time: 3600
        update_cache: true
        upgrade: dist
      when:
        - base_box | default(false) | bool
  post_tasks:
    - name: Display all variables/facts known for {{ inventory_hostname }} after applying roles
      debug:
        var: hostvars[inventory_hostname]
        verbosity: 2
    - name: Get the interface name for the additional network interface
      become: true
      changed_when: false
      shell: |
        set -e; \
        ip -o addr show | grep {{ ipv4_address }} | awk '{print $2}'
      register: additional_network_interface_name_result
      tags:
        - quick_setup
      when: ipv4_address is defined
    - name: Set facts related to the additional network interface
      set_fact:
        additional_network_interface_name: "{{ additional_network_interface_name_result.stdout }}"
      tags:
        - quick_setup
      when: ipv4_address is defined
    - name: Look up docker cgroup driver
      changed_when: false
      shell: |
        set -e; \
        docker info | grep 'Cgroup Driver' | awk -F': ' '{print $2}'
      register: docker_cgroup_driver_result
      tags:
        - quick_setup
    - name: Set additional facts
      set_fact:
        docker_cgroup_driver: "{{ docker_cgroup_driver_result.stdout }}"
      tags:
        - quick_setup
    - name: |
        Get the NetworkManager connection UUID for the {{ additional_network_interface_name | default('NOT DEFINED') }}
        connection
      become: true
      changed_when: false
      shell: |
        set -e; \
        nmcli -g UUID,DEVICE con show | grep {{ additional_network_interface_name }} | awk -F ":" '{print $1}'
      register: additional_network_interface_nm_conn_name_result
      tags:
        - quick_setup
      when: ipv4_address is defined
    - name: Set more facts related to the additional network interface
      set_fact:
        additional_network_interface_nm_connection_name: "{{ additional_network_interface_nm_conn_name_result.stdout }}"
      tags:
        - quick_setup
      when: ipv4_address is defined and additional_network_interface_nm_conn_name_result is defined
    - name: Display all variables/facts known for {{ inventory_hostname }} after setting facts
      debug:
        var: hostvars[inventory_hostname]
        verbosity: 2
    - name: Initialize Kubernetes node labels list
      set_fact:
        kubernetes_node_labels: []
    - name: Populate all nodes Kubernetes labels variable
      set_fact:
        kubernetes_node_labels: "{{ kubernetes_node_labels + [ '%s=%s'|format(item.label_key, item.label_value) ] }}"
      loop: "{{ all_nodes_kubernetes_labels }}"
      when:
        - all_nodes_kubernetes_labels is defined
    - name: Populate group Kubernetes node labels variable
      set_fact:
        kubernetes_node_labels: "{{ kubernetes_node_labels + [ '%s=%s'|format(item.label_key, item.label_value) ] }}"
      loop: "{{ group_kubernetes_labels }}"
      when:
        - group_kubernetes_labels is defined
    - name: Add node_name label to the list of labels
      set_fact:
        kubernetes_node_labels: "{{ kubernetes_node_labels + [ '%s=%s'|format('node_name', inventory_hostname) ] }}"
      when:
        - kubernetes_add_node_name_as_label
    - name: Print debug information
      changed_when: false
      vars:
        msg: |
            Add Kubernetes node name as label: {{ kubernetes_add_node_name_as_label }}
            Additional network interface IPv4 address: {{ ipv4_address | default('NOT DEFINED') }}
            Additional network interface name: {{ additional_network_interface_name | default('NOT DEFINED') }}
            Additional network NM UUID: {{ additional_network_interface_nm_connection_name | default('NOT DEFINED') }}
            Allow workloads on master nodes: {{ allow_workloads_on_masters | default('NOT DEFINED') }}
            Ansible distribution: {{ ansible_distribution }}
            Ansible distribution release: {{ ansible_distribution_release }}
            Ansible distribution version: {{ ansible_distribution_version }}
            Ansible domain: {{ ansible_domain }}
            Ansible FQDN: {{ ansible_fqdn }}
            Ansible hostname: {{ ansible_hostname }}
            Ansible node name: {{ ansible_nodename  }}
            Ansible kernel: {{ ansible_kernel }}
            Ansible user: {{ ansible_user }}
            Cluster IP CIDR: {{ cluster_ip_cidr }}
            Docker cgroup driver: {{ docker_cgroup_driver }}
            Inventory hostname: {{ inventory_hostname }}
            IP address: {{ ipv4_address | default('NOT DEFINED') }}
            IPv6 address: {{ ipv6_address | default('NOT DEFINED') }}
            Kubeadm token: {{ kubeadm_token }}
            Kubernetes master 1 hostname: {{ kubernetes_master_1_hostname }}
            Kubernetes master 1 IP: {{ kubernetes_master_1_ip }}
            Kubernetes network plugin: {{ kubernetes_network_plugin }}
            Kubernetes node labels (all nodes): {{ all_nodes_kubernetes_labels | default([]) }}
            Kubernetes node labels (group): {{ group_kubernetes_labels | default([]) }}
            Kubernetes node labels (to be applied): {{ kubernetes_node_labels }}
            Machine ID: {{ machine_id | default('NOT DEFINED') }}
            PATH: {{ hostvars[inventory_hostname]['ansible_env']['PATH'] }}
            Service IP CIDR: {{ service_ip_cidr }}
            Subnet mask IPv6: {{ subnet_mask_ipv6 }}
      debug:
        msg: "{{ msg.split('\n') }}"
    - name: Add an IPv6 address to {{ additional_network_interface_name }}
      become: true
      shell: |
        set -e ; \
        /vagrant/scripts/linux/configure-ipv6-interface.sh \
        {{ ipv6_address }} \
        {{ subnet_mask_ipv6 }} \
        {{ additional_network_interface_name }} \
        {{ additional_network_interface_nm_connection_name }}
      when: ipv6_address is defined
    - name: Remove FQDN from 127.0.0.1
      become: true
      lineinfile:
        path: /etc/hosts
        regexp: "^127[.]0[.]0[.]1.*{{ assigned_hostname }}"
        owner: root
        group: root
        mode: 0644
        state: absent
      when: assigned_hostname is defined
    - name: Add the FQDN to the hosts file
      become: true
      lineinfile:
        path: /etc/hosts
        regexp: "^{{ item.ip_v4_address }} {{ item.hostname }}"
        line: "{{ item.ip_v4_address }} {{ item.hostname }}"
        owner: root
        group: root
        mode: 0644
      loop: "{{ ip_to_host_mappings }}"
    - name: Generate Kubeadm configuration file
      become: true
      template:
        backup: false
        dest: /tmp/kubeadm-config.yaml
        group: root
        mode: 0755
        owner: root
        src: templates/kubeadm-config.yaml.j2
      when: inventory_hostname == kubernetes_master_1_hostname
      tags:
        - quick_setup
    - name: Generate weavenet configuration file
      become: true
      template:
        backup: false
        dest: /tmp/weavenet-config.yaml
        group: root
        mode: 0755
        owner: root
        src: templates/weavenet-config.yaml.j2
      when: inventory_hostname == kubernetes_master_1_hostname
      tags:
        - quick_setup
    - name: Generate Calico configuration file
      become: true
      template:
        backup: false
        dest: /tmp/calico-config.yaml
        group: root
        mode: 0755
        owner: root
        src: templates/calico-config.yaml.j2
      when: inventory_hostname == kubernetes_master_1_hostname
      tags:
        - quick_setup
    - name: Generate Flannel configuration file
      become: true
      template:
        backup: false
        dest: /tmp/kube-flannel-config.yaml
        group: root
        mode: 0755
        owner: root
        src: templates/kube-flannel-config.yaml.j2
      when: inventory_hostname == kubernetes_master_1_hostname and additional_network_interface_name is defined
      tags:
        - initialize_kubernetes_cluster
        - quick_setup
    - name: Initialize Kubernetes cluster (master)
      become: true
      shell: |
        set -e ; \
        /vagrant/scripts/linux/bootstrap-kubernetes-{{ kubernetes_classifier }}.sh \
        /tmp/kubeadm-config.yaml \
        {{ kubernetes_network_plugin }}
        {{ allow_workloads_on_masters }}
      args:
        creates: /home/vagrant/.kube/config
      when: inventory_hostname == kubernetes_master_1_hostname
      tags:
        - initialize_kubernetes_cluster
        - quick_setup
    - name: Enable kubectl autocompletion (master)
      lineinfile:
        dest: /home/vagrant/.bashrc
        line: "source <(kubectl completion bash)"
        owner: vagrant
      when: inventory_hostname == kubernetes_master_1_hostname
    - name: Initialize Kubernetes cluster (workers)
      become: true
      shell: |
        /vagrant/scripts/linux/bootstrap-kubernetes-{{ kubernetes_classifier }}.sh \
        {{ kubernetes_master_1_hostname }} \
        {{ kubeadm_token }} \
        {{ cluster_ip_cidr }} \
        {{ kubernetes_network_plugin }}
      args:
        creates: /etc/kubernetes/kubelet.conf
      when: "'kubernetes-minions' in group_names"
      tags:
        - quick_setup
    - name: Add labels to Kubernetes nodes
      command: >-
        kubectl label node {{ ansible_hostname }} {{ item }} --overwrite=true
      # Delegate to the first master, because it has the config file to connect to the cluster
      delegate_to: "{{ groups['kubernetes-masters'][0] }}"
      loop: "{{ kubernetes_node_labels }}"
      changed_when: false
      when:
        - "'kubernetes-masters' in group_names or 'kubernetes-minions' in group_names"
        - kubernetes_node_labels is defined
    - name: Ensure changes are written on disk
      become: true
      command: >-
        sync
      changed_when: false
      when:
        - base_box | default(false) | bool
    - name: remove /etc/machine-id
      become: true
      file:
        path: /etc/machine-id
        state: absent
      when:
        - base_box | default(false) | bool
    - name: remove /var/lib/dbus/machine-id
      become: true
      file:
        path: /var/lib/dbus/machine-id
        state: absent
      when:
        - base_box | default(false) | bool
  roles:
    - role: docker
      become: true
    - role: kubernetes
      become: true
  vars:
    kubernetes_helm_platform: '{{ kubernetes_helm_os }}-{{ kubernetes_helm_arch }}'
    kubernetes_helm_name: helm-{{ kubernetes_helm_ver }}-{{ kubernetes_helm_platform }}
    kubernetes_helm_archive: '{{ kubernetes_helm_name }}.{{ kubernetes_helm_archive_type }}'
    kubernetes_helm_url: '{{ kubernetes_helm_mirror }}/{{ kubernetes_helm_archive }}'
    kubernetes_helm_install_dir: '{{ kubernetes_helm_bin_dir }}/helm-{{ kubernetes_helm_ver }}'
    kubernetes_helm_checksum: '{{ kubernetes_helm_checksums[kubernetes_helm_ver][kubernetes_helm_platform] }}'
