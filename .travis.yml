---
dist: bionic
env:
  global:
    - VAGRANT_VERSION="2.2.7"
    - BASE_BOX_VAGRANT_VM_ID="base-box-builder.k8s-play.local"
jobs:
  fast_finish: true
  include:
    - name: "Whitespace error check"
      language: shell
      script: git diff-tree --check $(git hash-object -t tree /dev/null) HEAD
      stage: linting
    - name: "Missing EOF newlines check"
      language: shell
      script: |
        find "$(pwd)" -type f -not -path "*/\.git/*" >tmp; \
        while IFS= read -r file; do \
          case "$(git diff --no-index --numstat /dev/null "$file")" in \
            "$(printf '%s\t-\t' -)"*) echo "skipping newline check for $file because it's a binary"; continue ;; \
            *) echo "Checking $file"; [ -z "$(tail -c1 "$file")" ] || exit 1 ;; \
          esac; \
        done <tmp; \
        rm tmp;
    - name: "hadolint"
      language: shell
      script: |
        find . -name "Dockerfile" -type f -print0 \
        | xargs -0 -I file sh -c 'docker run --rm -i hadolint/hadolint:v1.17.5-8-gc8bf307-alpine < "file"' \
        || exit 1
    - name: kubeval
      language: shell
      script: |
        docker run -t \
          -v "$(pwd)":/kubernetes-playground:ro \
          garethr/kubeval:0.14.0 \
          --strict  -d /kubernetes-playground/kubernetes
    # Disabling travis lint for now, the client is too buggy (complains about missing tokens)
    # - before_install: gem install travis --no-document
    #   install: echo "Overriding the default install, to avoid installing gems from the Gemfile"
    #   name: "Travis lint"
    #   script: travis lint --skip-completion-check -x
    - name: "Shellcheck"
      language: shell
      script: |
        for file in $(find "$(pwd)" \
          -type f \
          -not -path "*/\.git/*" \
          -not -name "*.md" \
          -exec grep -Eq '^#!(.*/|.*env +)(sh|bash|ksh)' {} \; -print); do \
            f="${file#$(pwd)}"; \
            f="${f/\//}"; \
            echo "Linting $f"; \
            if [ ! -x "$f" ]; then echo "Error: $f is not executable!"; exit 1; fi; \
            docker run -v "$(pwd)":/mnt:ro --rm -t koalaman/shellcheck:v0.7.1 \
              "$f" || exit 1; \
        done;
    - name: "YAMLlint"
      cache: pip
      language: python
      install: pip install -r requirements.txt
      python: "3.8"
      script: yamllint --strict $(git ls-files '*.yaml' '*.yml') || exit 1
    - name: "Markdownlint"
      cache: npm
      install: npm install
      language: node_js
      node_js: node
      script: |
        find -name "*.md" -not -path "*/node_modules/*" \
        | xargs markdownlint || exit 1
    - name: "shfmt"
      language: go
      before_install: GO111MODULE=on go get mvdan.cc/sh/v3/cmd/shfmt
      go: "1.14.1"
      script: shfmt -d . || exit 1;
    - name: "ansible-lint"
      before_script: cd ansible || exit 1
      cache: pip
      install: pip install -r requirements.txt
      language: python
      python: "3.8"
      script: |
        ansible-lint -v \
          kubernetes.yml \
          openssl-self-signed-certificate.yml \
        || exit 1
    - name: "Build kitesproject/net-tests container image (final)"
      stage: build_container_images
      language: shell
      before_script: cd docker/kites/net-tests || exit 1
      script: |
        docker build --target final -t kitesproject/net-test .
    - name: "Build kitesproject/net-tests container image (dev)"
      language: shell
      before_script: cd docker/kites/net-tests || exit 1
      script: |
        docker build --target dev -t kitesproject/net-test:latest-dev .
    - name: "Build base box"
      after_script:
        - tree .
      env:
        - VAGRANT_DEFAULT_PROVIDER=libvirt
      stage: vagrant
      before_install:
        - sudo scripts/linux/ci/install-libvirt.sh
        - sudo scripts/linux/ci/install-vagrant.sh
        - sudo scripts/linux/ci/install-vagrant-plugins.sh
        - sudo scripts/linux/ci/generate-env-for-travis.sh
        # Fix permissions after installing vagrant plugins with sudo
        - sudo chown -R travis:travis $HOME/.vagrant.d
        # This doesn't have effect if you don't open a new shell
        - sudo adduser "$(id -un)" libvirt
        - sudo adduser "$(id -un)" kvm
      before_script:
        - env | sort
        - sudo lsmod | sort
        - kvm-ok
        - gem environment
        # List all installed gems
        - gem query --local
        - bundle list
        - tree .
        - vagrant validate
        - vagrant status
        - vagrant box list -i
        - inspec -h
        - inspec exec -h
        - inspec check -h
        - inspec check --chef-license=accept test/inspec/kubernetes-playground
      cache:
        bundler: true
        directories:
          - $HOME/.vagrant.d/boxes
          - $HOME/.vagrant.d/gems
          - $GEM_HOME
      install:
        - gem install bundler
        - bundle install || exit 1
      language: ruby
      # Run with sudo because the libvirt socket is owned by the libvirt group,
      # and the current user was added to the group in the current session,
      # so the membership to that group is not yet in effect.
      # Set the PATH to make the installed gems accessible.
      script: |
        sudo \
        PATH="$PATH" \
        VAGRANT_DEFAULT_PROVIDER="$VAGRANT_DEFAULT_PROVIDER" \
        vagrant up "$BASE_BOX_VAGRANT_VM_ID" || exit 1; \
        sudo \
        PATH="$PATH" \
        VAGRANT_DEFAULT_PROVIDER="$VAGRANT_DEFAULT_PROVIDER" \
        VAGRANT_SUPPRESS_OUTPUT="true" \
        scripts/linux/ci/run-inspec-against-host.sh "$BASE_BOX_VAGRANT_VM_ID" || exit 1
language: shell
os: linux
services:
  - docker
stages:
  - linting
  - build_container_images
  - vagrant
